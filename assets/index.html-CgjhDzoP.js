import{_ as h,e as k,g as n,f as a,h as i,i as e,j as l,r as p,o as d}from"./app-B14-sJo6.js";const r={};function o(g,s){const t=p("RouteLink");return d(),k("div",null,[s[10]||(s[10]=n('<h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><h3 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象"><span>事件对象</span></a></h3><p>事件是基本的可处理对象, 一个事件由 <code>ncatbot.plugin.event.Event</code> 类表示.</p><p><code>Event</code> 类主要包含两个成员变量</p><ul><li><code>data: Any</code> 事件携带的数据</li><li><code>type: str</code> 事件类型列表</li></ul><h3 id="事件类型" tabindex="-1"><a class="header-anchor" href="#事件类型"><span>事件类型</span></a></h3><p>事件在被发布时会携带上<strong>事件类型</strong>, 事件类型用于订阅和处理事件.</p><p>事件类型命名规范为 <code>[插件名].[事件名]</code>.</p><p>基本事件 (群聊消息, 私聊消息, 请求消息, 通知消息, 启动事件) 的事件名封装如下:</p><ul><li><code>ncatbot.utils.assets.literals.OFFICIAL_GROUP_MESSAGE_EVENT = &quot;ncatbot.group_message_event&quot;</code></li><li><code>ncatbot.utils.assets.literals.OFFICIAL_PRIVATE_MESSAGE_EVENT = &quot;ncatbot.private_message_event&quot;</code></li><li><code>ncatbot.utils.assets.literals.OFFICIAL_REQUEST_EVENT = &quot;ncatbot.request_event&quot;</code></li><li><code>ncatbot.utils.assets.literals.OFFICIAL_NOTICE_EVENT = &quot;ncatbot.notice_event&quot;</code></li><li><code>ncatbot.utils.assets.literals.OFFICIAL_STARTUP_EVENT = &quot;ncatbot.startup_event&quot;</code></li></ul><p>插件也可以自行发布事件, 具体请继续阅读.</p><h3 id="事件传播" tabindex="-1"><a class="header-anchor" href="#事件传播"><span>事件传播</span></a></h3><p>事件沿事件总线传播, 处理事件时可以主动停止事件传播或者添加事件处理结果, 相关函数:</p><ul><li><code>Event.stop_propagation()</code></li><li><code>Event.add_result(result)</code></li></ul><h2 id="事件总线" tabindex="-1"><a class="header-anchor" href="#事件总线"><span>事件总线</span></a></h2><p>咕咕咕.</p><h2 id="订阅事件" tabindex="-1"><a class="header-anchor" href="#订阅事件"><span>订阅事件</span></a></h2>',17)),a("p",null,[s[1]||(s[1]=i("可以")),s[2]||(s[2]=a("strong",null,"使用兼容回调函数注册器",-1)),s[3]||(s[3]=i("来订阅事件，具体参考")),e(t,{to:"/notes/guide/6.%20%E5%BC%80%E5%8F%91%20NcatBot%20%E6%8F%92%E4%BB%B6/3.%20%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BA%A4%E4%BA%92%E7%B3%BB%E7%BB%9F/1.%20%E4%BA%86%E8%A7%A3%20NcatBot%20%E6%8F%92%E4%BB%B6.html"},{default:l(()=>s[0]||(s[0]=[i("了解 NcatBot 插件")])),_:1}),s[4]||(s[4]=i("."))]),s[11]||(s[11]=n(`<p>兼容回调函数注册器的本质仍然是订阅事件. 使用兼容注册器注册后, 会在<strong>插件加载时</strong>为注册的函数<strong>订阅对应的事件</strong>.</p><p>下面介绍通过事件名订阅的方法。</p><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h3><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyPlugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">BasePlugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> on_load</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        # 支持正则匹配,re:前缀</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">register_handler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">re:test\\.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">handle_test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 订阅 test 插件发布的所有事件</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">register_handler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">exact.match</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">handle_exact</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 订阅 exact 插件发布的 match 事件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> handle_test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;正则匹配处理器: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">data</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> handle_exact</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        print</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;精确匹配处理器: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">data</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>BasePlugin</code> 提供了 <code>register_handler</code> 方法用于订阅事件, 该方法接受两个参数: <ul><li><code>type: str</code> 事件类型, 支持全名称和正则表达式，请参考上方的示例。</li><li><code>func: Callable[[Event], Any]</code> 事件回调函数, 事件回调函数接受一个 <code>Event</code> 类型的参数，且一般是插件类的成员函数。</li></ul></li><li>理论上讲在任何时间都可以订阅事件，但一般在 <code>on_load</code> 函数中订阅。</li></ul><h3 id="事件回调函数" tabindex="-1"><a class="header-anchor" href="#事件回调函数"><span>事件回调函数</span></a></h3><p>订阅事件时需要指定一个回调函数, 回调函数需要接受一个 <code>Event</code> 类型的参数。</p><p>在事件回调函数中可以对事件进行处理，一般有下面的一些操作：</p><ul><li>调用 <code>self.api</code> 发送一些什么东西。（插件实例会有一个 <code>BotAPI</code> 成员，用于调用 API）</li><li>调用 <code>event.stop_propagation()</code> 停止事件传播。</li><li>调用 <code>event.add_result(result)</code> 添加事件处理结果。</li></ul><h4 id="event-原型" tabindex="-1"><a class="header-anchor" href="#event-原型"><span>Event 原型</span></a></h4><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    def</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __init__</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Any</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> EventSource </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> None</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">初始化事件</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">type </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> type</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 事件类型, 定义见上方</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">data </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> data </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 事件数据</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">source </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> source  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 事件源, 描述事件触发的群聊和用户</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> stop_propagation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">停止事件的传播:当调用此方法后，后续的处理器将不会被执行</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add_result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Any</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">添加事件处理结果</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    def</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __repr__</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&#39;Event(type=&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">type</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;,data=</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">{self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">data</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">)&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="event-data-的规定" tabindex="-1"><a class="header-anchor" href="#event-data-的规定"><span>Event.data 的规定</span></a></h4>`,12)),a("p",null,[s[6]||(s[6]=i("对于官方事件类型, 对应的 ")),s[7]||(s[7]=a("code",null,"Event.data",-1)),s[8]||(s[8]=i(" 保证和 ")),e(t,{to:"/notes/guide/3.%20%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/1.%20%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0.html#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0"},{default:l(()=>s[5]||(s[5]=[i("回调函数参数")])),_:1}),s[9]||(s[9]=i("一致."))]),s[12]||(s[12]=n(`<p>对于自定义事件类型, 插件作者应该自己定义规范.</p><h2 id="发布事件" tabindex="-1"><a class="header-anchor" href="#发布事件"><span>发布事件</span></a></h2><p>在 <code>BasePlugin</code> 上下文中任意位置均可发布事件.</p><p>事件分为同步和异步, 同步事件会优先处理并迅速返回结果, 异步事件将会挂到异步事件循环中处理, <mark>如果可能请一定使用异步事件, 同步事件未经测试不稳定</mark></p><p>事件的处理结果(如果有), 应该使用 <code>Event.add_result(result)</code> 在回调函数中添加.</p><p><mark>请务必严格按照 <code>[插件名].[事件名]</code> 的格式填写事件类型.</mark></p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyPlugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">BasePlugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> some_func</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        event </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">MyPlugin.event</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">message</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        await</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">event_bus</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">publish_async</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 异步发布不等待结果</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        results </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">event_bus</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">publish_sync</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 同步等待结果</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7))])}const A=h(r,[["render",o],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/guide/pasevent/","title":"事件的订阅和发布","lang":"zh-CN","frontmatter":{"title":"事件的订阅和发布","createTime":"2025/03/06 10:07:54","permalink":"/guide/pasevent/","description":"事件 事件对象 事件是基本的可处理对象, 一个事件由 ncatbot.plugin.event.Event 类表示. Event 类主要包含两个成员变量 data: Any 事件携带的数据 type: str 事件类型列表 事件类型 事件在被发布时会携带上事件类型, 事件类型用于订阅和处理事件. 事件类型命名规范为 [插件名].[事件名]. 基本事件 ...","head":[["meta",{"property":"og:url","content":"http://docs.ncatbot.xyz/guide/pasevent/"}],["meta",{"property":"og:site_name","content":"NcatBot 文档"}],["meta",{"property":"og:title","content":"事件的订阅和发布"}],["meta",{"property":"og:description","content":"事件 事件对象 事件是基本的可处理对象, 一个事件由 ncatbot.plugin.event.Event 类表示. Event 类主要包含两个成员变量 data: Any 事件携带的数据 type: str 事件类型列表 事件类型 事件在被发布时会携带上事件类型, 事件类型用于订阅和处理事件. 事件类型命名规范为 [插件名].[事件名]. 基本事件 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T16:23:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T16:23:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件的订阅和发布\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-23T16:23:09.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.31,"words":994},"git":{"updatedTime":1750695789000,"contributors":[{"name":"liang","username":"liang","email":"2424123787@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/liang?v=4","url":"https://github.com/liang"}]},"autoDesc":true,"filePathRelative":"notes/guide/6. 开发 NcatBot 插件/3. 插件的交互系统/3.1 事件的发布和订阅.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"c6d211","sort":10001,"name":"guide"},{"id":"617ec3","sort":6,"name":" 开发 NcatBot 插件"},{"id":"7c2741","sort":3,"name":" 插件的交互系统"}]}');export{A as comp,c as data};
