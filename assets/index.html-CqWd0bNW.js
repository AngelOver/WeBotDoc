import{_ as r,e as s,g as o,f as e,i,j as l,r as p,o as c,h as n}from"./app-B14-sJo6.js";const d={};function g(B,t){const a=p("RouteLink");return c(),s("div",null,[t[2]||(t[2]=o('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>NcatBot 的生命周期按照时间顺序分为以下几步:</p><ul><li>引导</li><li>环境检查</li><li>连接 NapCat 服务</li><li>加载插件</li><li>运行</li><li>退出</li></ul><h2 id="引导" tabindex="-1"><a class="header-anchor" href="#引导"><span>引导</span></a></h2><ol><li>导入必要的模块</li><li>设置配置项(可选)</li><li>创建 BotClient 实例 <ol><li>检查配置项是否合法, 检查是否已经创建过 BotClient 实例.</li><li>初始化 BotAPI.</li><li>初始化事件总线和内置功能.</li><li>加载功能注册钩子.</li><li>加载权限数据.</li></ol></li><li>注册回调函数(可选)</li><li>启动 BotClient 实例</li></ol><p>以上过程称为<strong>引导</strong>，用于<strong>引导</strong>的代码称作<strong>引导程序</strong>。</p>',6)),e("p",null,[i(a,{to:"/notes/guide/2.%20%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91/1.%20%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F%E6%9C%80%E5%B0%8F%E7%A4%BA%E4%BE%8B.html#%E8%BF%90%E8%A1%8C"},{default:l(()=>t[0]||(t[0]=[n("插件模式引导")])),_:1})]),e("p",null,[i(a,{to:"/notes/guide/2.%20%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91/2.%20%E4%B8%BB%E5%8A%A8%E6%A8%A1%E5%BC%8F%E6%9C%80%E5%B0%8F%E7%A4%BA%E4%BE%8B.html#%E8%BF%90%E8%A1%8C"},{default:l(()=>t[1]||(t[1]=[n("主动模式引导")])),_:1})]),t[3]||(t[3]=o('<h2 id="环境检查" tabindex="-1"><a class="header-anchor" href="#环境检查"><span>环境检查</span></a></h2><p>环境检查发生在调用 <code>BotClient.run()</code> 或者 <code>BotClient.run_blocking()</code> 时，包含以下步骤：</p><ol><li><strong>检查 NcatBot 安装</strong>：检查 NcatBot 是否通过 pip 安装。如果开启了 NcatBot 更新检查，则额外检查 NcatBot 是否有新版本可用，如果有新版本则提醒用户更新。</li><li><strong>检查 NapCat 服务</strong>： 检查 <code>ws_uri</code> 中指定的 NapCat 服务是否能被连接并且可用, 如果可用则跳过<strong>环境检查</strong>、 <strong>NapCat 启动</strong>、<strong>引导登录</strong>，进入<strong>确认登录</strong>。</li><li><strong>检查 NapCat 安装</strong>：NapCat 是否被正确安装。</li><li><strong>安装或更新 NapCat</strong>：如果 NapCat 未安装，则安装 NapCat。如果开启了 NapCat 更新检查且 NapCat 有新版本可用, 则在用户确认后更新 NapCat。</li><li><strong>配置 NapCat</strong>： 自动配置 NapCat 的各项内容, 以便 NcatBot 能正常连接 NapCat 服务. <mark>如果你自行改动了 NapCat 配置, NcatBot 会直接覆盖掉你的修改</mark>.</li></ol><h2 id="连接-napcat-服务" tabindex="-1"><a class="header-anchor" href="#连接-napcat-服务"><span>连接 NapCat 服务</span></a></h2><ol><li><strong>启动 NapCat 服务</strong>：Linux 通过命令行启动无感启动 NapCat。Windows 下会询问是否允许 NapCat 对计算机进行修改, 需要同意后才能启动。</li><li><strong>引导登录</strong>：如果之前本地有登录记录，则会使用快速登录。否则需要扫描终端的二维码登录。</li><li><strong>确认登录</strong>：通过 NapCat WebUI 接口确认登录结果，如果登录信息不一致，则终止运行并提醒。</li><li><strong>连接 NapCat 服务</strong>：使用 WebSocket 协议连接到 NapCat 服务。</li></ol><h2 id="加载插件" tabindex="-1"><a class="header-anchor" href="#加载插件"><span>加载插件</span></a></h2><ol><li>查找工作目录下的 <code>plugins</code> 目录, 读取插件 meta 信息.</li><li>根据插件 meta 中的依赖信息构建加载拓扑图.</li><li>加载每个插件 <ol><li>加载插件私有可持久化数据(包括配置项).</li><li>调用插件 <code>BasePlugin.on_load</code> 函数, 执行自定义初始化操作.</li><li>事件总线注册<strong>插件功能</strong>和<strong>插件配置项</strong>.</li></ol></li></ol><h2 id="运行" tabindex="-1"><a class="header-anchor" href="#运行"><span>运行</span></a></h2><ol><li>监听来在 NapCat 的事件并上报. 事件对应的回调函数被调用, 同时事件上报到事件总线.</li><li>处理事件 <ul><li>通过 <code>BotClient</code> 注册的回调函数对事件做第一次处理。</li><li>事件进入事件总线，激活<strong>功能函数</strong>做第二次处理, 调用订阅了该事件的所有<strong>回调函数</strong>做第三次处理。</li></ul></li><li>事件被拦截或者被处理 <ul><li>订阅事件的回调函数可以拦截该事件, 阻止其继续传播.</li><li>订阅事件的回调函数可以添加事件的处理结果, 以便和其它部分通信.</li></ul></li></ol><h2 id="退出" tabindex="-1"><a class="header-anchor" href="#退出"><span>退出</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>点 X 关闭属于异常退出, 不会触发退出流程。</p></div><p>插件模式按下 <code>Ctrl+C</code> 正常退出，或者主动模式调用对应 <code>BotClient</code> 实例的 <code>exit</code> 方法, 进入退出流程。</p><ol><li>保存权限数据.</li><li>调用 <code>BasePlugin._unload_</code> 函数, 完成自定义卸载操作.</li><li>保存插件私有可持久化数据(包括配置项).</li><li>关闭 NapCat 服务(可选, 默认不关闭).</li></ol>',13))])}const h=r(d,[["render",g],["__file","index.html.vue"]]),N=JSON.parse('{"path":"/guide/lifespan/","title":"NcatBot 生命周期","lang":"zh-CN","frontmatter":{"title":"NcatBot 生命周期","createTime":"2025/02/08 10:07:54","permalink":"/guide/lifespan/","description":"简介 NcatBot 的生命周期按照时间顺序分为以下几步: 引导 环境检查 连接 NapCat 服务 加载插件 运行 退出 引导 导入必要的模块 设置配置项(可选) 创建 BotClient 实例 检查配置项是否合法, 检查是否已经创建过 BotClient 实例. 初始化 BotAPI. 初始化事件总线和内置功能. 加载功能注册钩子. 加载权限数据....","head":[["meta",{"property":"og:url","content":"http://docs.ncatbot.xyz/guide/lifespan/"}],["meta",{"property":"og:site_name","content":"NcatBot 文档"}],["meta",{"property":"og:title","content":"NcatBot 生命周期"}],["meta",{"property":"og:description","content":"简介 NcatBot 的生命周期按照时间顺序分为以下几步: 引导 环境检查 连接 NapCat 服务 加载插件 运行 退出 引导 导入必要的模块 设置配置项(可选) 创建 BotClient 实例 检查配置项是否合法, 检查是否已经创建过 BotClient 实例. 初始化 BotAPI. 初始化事件总线和内置功能. 加载功能注册钩子. 加载权限数据...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T16:23:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T16:23:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NcatBot 生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-23T16:23:09.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.25,"words":974},"git":{"updatedTime":1750695789000,"contributors":[{"name":"liang","username":"liang","email":"2424123787@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/liang?v=4","url":"https://github.com/liang"}]},"autoDesc":true,"filePathRelative":"notes/guide/2. 基本开发/3. NcatBot 生命周期.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"c6d211","sort":10001,"name":"guide"},{"id":"128551","sort":2,"name":" 基本开发"}]}');export{h as comp,N as data};
